{"ast":null,"code":"var _jsxFileName = \"/Users/Austin/Desktop/React/39.6/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    nrows = 5,\n    ncols = 5,\n    chanceLightStartsOn = 0.25\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = [];\n\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n\n      initialBoard.push(row);\n    }\n\n    return initialBoard;\n  }\n  /* Check if the player has won */\n\n\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n  /* Flip cells around a given cell */\n\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const boardCopy = oldBoard.map(row => [...row]);\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      return boardCopy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You Win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  } // make table board: rows of Cell components\n\n\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this));\n    }\n\n    tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tblBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","y","row","x","push","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","tblBoard"],"sources":["/Users/Austin/Desktop/React/39.6/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  /* Check if the player has won */\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  /* Flip cells around a given cell */\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>You Win!</div>;\n  }\n\n  // make table board: rows of Cell components\n\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <table className=\"Board\">\n      <tbody>{tblBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module"}